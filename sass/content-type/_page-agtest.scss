
// Regroupe le style pour le contenu des node.tpl custom
// cr√©er des fichiers _node-TYPE.scss et les importer dans application.scss

/*-------------------------------------|
|       AG TEST GRID                   |
|                                      |
|--------------------------------------*/

/**
 * Styles for AG grids & Container
 */

.container {
  background-color: #fbeecb;
   @include container;
   @include susy-grid-background;
   overflow: hidden;
}

.ag1, .ag3 {
  background-color: #71dad2;
}

.ag2 {
  background-color: #fae7b3;
}

.ag4,.ag5,.ag8,.ag9 {
  background-color: #ee9e9c;
}

.ag6 {
  background-color: #f09671;
}

.ag7 {
  background-color: #f6d784;
}

.ag10 {
  background-color: #ea9fc3;
}

/**
 * Text Styles
 */
h2 {
  text-align: center;
  font-size: 1rem;
  font-weight: normal;
  padding-top: 1.8rem;
  padding-bottom: 1.8rem;
}
.ag1 {
  @include span-columns(3,12);
}

.ag3 {
  @include span-columns(3 omega,12);
  // The omega flag is set here to tell Susy that ag3 is the final column. 
}
.ag2 {
    @include span-columns(6,12);
  // Optionally, you can choose to include the context.
  // overflow hidden is used to self clear children
  overflow: hidden; 
}

.ag4 {
  // Specifying the context with 6
  @include span-columns(3, 6);
}

.ag5 {
  // Additionally, adding omega to signify the last column
  @include span-columns(3 omega, 6);
}

.ag6 {
  @include span-columns(2, 6);
}

.ag7 {
  @include span-columns(4 omega, 6);
  overflow: hidden;
}

.ag8 {
  @include span-columns(2, 4);
}

.ag9 {
  @include span-columns(2 omega, 4);
}

.ag10 {
  // There is no need to use span columns on AG 10 since elements take up 100% of 
  //the space by default in display block. In this case, we just have to make sure to clear the floats 
  //from ag8 and ag9. 
  clear: both;

  // You can still use span-columns if you want to though. There's no fault in using that. 
  @include span-columns(4, 4);
}